#!/usr/bin/env python
# documentation
# true module structure and upload to pip

def main(argv=None):
    from argparse import ArgumentParser
    from os.path import isfile
    from sys import stdin
    import re

    parser = ArgumentParser(
        description="Create a series of experimental runs using a set of \
                     parameters, a matrix, and a command prefix")

    # FIXME: uh, better parameter names?
    parser.add_argument('-p', '--paramfile', help='parameter file')
    parser.add_argument('-m', '--matrixfile', help='matrix file')
    parser.add_argument('-s', '--psep', default=' ', 
                        help='parameter separator')
    parser.add_argument('-i', '--instancefile', default='-', 
                        help='problem instances file (defaults to stdin)')
    parser.add_argument('-c', '--command', 
                        default='{PARAMS} {INSTANCE}', help='command')

    args = parser.parse_args()

    params = None

    if isfile(args.paramfile):
        params = [line.strip() for line in open(args.paramfile, 'r')]
    else:
        raise SystemExit("error: must specify valid parameter file.")

    if isfile(args.matrixfile):
        matrix = [line.strip() for line in open(args.matrixfile, 'r')]
    else:
        raise SystemExit("error: must specify valid matrix file.")
        

    if '-' == args.instancefile:
        instances = stdin
    elif isfile(args.instancefile):
        instances = open(args.instancefile, 'r')
    else:
        raise SystemExit("error: must specify valid problem instance file.")

    for instance in instances:
        instcmd = re.sub('{INSTANCE}', instance.strip(), args.command)
        for row in matrix:
            if len(params) != len(row):
                raise SystemExit("error: number of parameters and matrix " +
                                 "columns must be equal.")
            expparams = args.psep.join(
                params[i] for i in range(len(params)) if row[i] == '1')
            print re.sub('{PARAMS}', expparams, instcmd)

if __name__ == "__main__":
    main()
